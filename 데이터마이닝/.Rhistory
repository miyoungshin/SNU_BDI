x
y <- faithful$waiting
plot(x,y)
summary(x)
plot(x,y,xlab='Eruptions',ylab = 'Waiting')
plot(x,y,xlab='Eruptions',ylab = 'Waiting',cex.axis=2)
par(mfrow=c(1,1))
plot(x,y,xlab='Eruptions',ylab = 'Waiting',cex.axis=2)
length(faithful$waiting)
freq=tabulate(faithful@waiting)
freq=tabulate(faithful$waiting)
freq
max(freq)
which.max(freq)
var(x)
var(y)
boxplot(x)
boxplot(y)
boxplot(y,main='Eruptions')
summary(x)
summary(y)
b 122%2
b 122%@2
b 122%%2
b <- 122%%2
b
help tabulate
help tabulate()
help(tabulate)
data()
table(xx)
table(x)
tabulate(a)
tabulate(x)
x
table(x)
tabulate(x)
par(cex=1.3)
install.packages("ggplot")
install.packages("ggplot2")
help("ggplot")
help(ggplot2)
help('ggplot2')
library(ggplot2)
help("ggplot2")
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
# 만일 저장 후 불러왔을 때 한글이 깨지면 인코딩을 확인
x <- 1:10
y <- seq(1,10)
x
y
int(x)
mode(x)
mode(y)
x <- 1:10
mode(x)
class(x)
class(y)
x <- ("안녕하세요 반갑습니다")
ㅌ
x
x <- c(1,0,1,1,0,0,1,1,1,1,1)
x
x <- as.logical(x)
x
data("diamonds")
data()
data.co2 <- data(CO2)
data.co2
data.co2 <- CO2
data.co2
summary(data.co2)
table(data.co2$Type)
a <- c(12.3,11.2,10.3,10.9,10.5,11.2)
table(a) <- b
table(a) -> b
b
tabulate(a) -> c
c
x <- c(1,2,3,4,4,4,1,2,2,3)
if(x=2){y=1}
if(x=2){y=1}
if(x=2){ y=1}
if(x=2){
if(x = 2) {
x = 3
if (x =! 2) {}
if (x > 2) {}
if (x > 2) {
if (x == 2) {
table(iris$Species)
library(xlsx)
library(rJava)
dbiinom(3,siez=5,prob=0.1)
dbinom(3,siez=5,prob=0.1)
dbinom(3,size=5,prob=0.1)
sum(dbinom(0:5,size=20,prob=0.1))
rnorm(100,mean=0,1)
rnorm(100)
rnorm(100)
a <- rnorm(100)
library(ggplot2)
myFamilyNames = c("Dad","Mom","Sis","Bro","Dog")
myFamilyAges = c(43, 42, 12, 8, 5)
myFamilyGenders = c("Male","Female","Female","Male","Female")
myFamilyWeights = c(188,136,83,61,44)
myFamily <- data.frame(myFamilyNames, myFamilyAges, myFamilyGenders, myFamilyWeights)
myFamily
myFamily <- colnames(Names,Age,Genders,Weights)
str(mtFamily)
str(myFamily)
help(colnames)
class(myFamily)
class(myFamily$myFamilyAges)
level(myFamilyGenders)
myFamily$myFamilyNames <- as.character(myFamily$myFamilyNames)
str(myFamily)
summary(myFamily)
myFamily[,2]
iris
head(iris)
str(iris)
ggplot(iris$Sepal.Length,iris$Sepal.Length)
gglots(iris$Sepal.Length,iris$Sepal.Length)
gglot
ggplot2(iris$Sepal.Length,iris$Sepal.Length)
ggplot(iris,iris$Sepal.Length,iris$Sepal.Width)
ggplot(iris$Sepal.Length,iris$Sepal.Width)
iris[1:15,]
seaosa <- iris[1:50,]
seaosa
sesosa <- setosa
sesosa -> setosa
esaosa <- setosa
esaosa -> setosa
seaosa -> setosa
dbinom(3,5,0.1)
dbinom(0:6,6,0.5)
pbinom(5,20,10)
pbinom(5,20,0.1)
1- bpinom(3,20,0.1)
1- pbinom(3,20,0.1)
rbinom(20,10,0.2)
a <- rbinom(20,10,0.2)
average(a)
mean(a)
pbinom(20,10,0.2)
pbinom(3,10,0.2)
dunif(1,0,10)
punif(1,0,2)
punif(2,0,2)
punif(0.3,0,2)
punif(0.4,0,2)
punif(0.5,0,2)
punif(0.8,0,2)
punif(0.8,0,2)
dnorm(14,20,2)
dnorm(19,20,2)
dnorm(20,20,2)
dnorm(0,0,1)
rnorm(20,0,1)
kor <- c(42,38,51,53,40,37,41,29,52,39,45,34,47,35,44,48,47,30,34)
eng <- c(30,25,34,35,31,29,33,23,36,30,32,29,34,30,28,29,33,24,30,30)
length(eng)
kor <- c(42,38,51,53,40,37,41,29,52,39,45,34,47,35,44,48,47,30,29,34)
kor
eng
cor.test(kor,eng)
cor.test(kor,eng,conf.level = 0.99)
lm(eng~kor)
summary <- lm(eng~kor)
result <- lm(eng~kor)
summary(result)
(0.7567478)^2
anova(result)
132.716/(132.716+99.034)
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
car_lm <- lm(price~year); summary(car_lm )
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
year <- c(1,1.5,2,2,3,3,3.2,4,4.5,5,5,5.5)
price <- c(4.5,4,3.2,3.4,2.5,2.3,2.3,1.6,1.5,1,0.8,0.4)
car_lm <- lm(price~year); summary(car_lm )
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
sxx
t0
t0 <= qt(0.05,10)
t0 <= qt(0.10,10)
qt(0.05,10)
car_lm
car_lm$coefficients
car_lm$coefficients[2]
car_lm$coefficients[2] - 0.8
car_lm$coefficients[2] - (-0.8)
anova(car_lm)
cor_lm["Residuals"]
car_lm["Residuals","Mean Sq"]
anova(car_lm)["Residuals","Mean Sq"]
anova(car_lm)["Residuals"]
anova(car_lm)
anova(car_lm)["Residuals"]
anova(car_lm)[Mean Sq"]
anova(car_lm)["Mean Sq"]
anova(car_lm)["Residuals",]
lm1 <- lm(price~year); summary(lm1 )
lm1$coefficients[2]
lm1$coefficients[1]
data.frame("year"=2.5)
predict(lm1,newdata=data.frame("year"=2.5),intervel="confidence")
predict(lm1,newdata=data.frame("year"=2.5),intervel="prediction")
predict(lm1,newdata=data.frame("year"=2.5),interval="prediction")
predict(lm1,newdata=data.frame("x"=2.5),interval="prediction")
x
newdata
confint(car_lm)
confint(car_lm,conf.level=0.94)
car_lm
year <- c(1,1.5,2,2,3,3,3.2,4,4.5,5,5,5.5)
price <- c(4.5,4,3.2,3.4,2.5,2.3,2.3,1.6,1.5,1,0.8,0.4)
?confint
confint(lm1,level=0.99)
plot(restudent(lm1))
plot(rstudent(lm1))
length(iris)
iris
lm(Sepal.Width~.,data=iris)
lm2 <- lm(Sepal.Width~.,data=iris)
summary(lm2)
library(MASS)
data(Boston)
Boston
summary(Boston)
a <- lm(medv~.,data=Boston)
a
step(a,direction="backward")
step(a,direction="forward")
step(a,scope=(~1,~.),direction="forward")
step(a,scope=(lower=~1,upper=~.),direction="forward")
step(a,scope=(lower=~1,upper=~.),direction="forward")
step(lm(medv ~1,data=Boston),scope=(lower=~1,upper=~.),direction="forward")
step(a,scope=(),direction="forward")
?step
step(a,direction="forward")
step(a,direction="both")
lm(nedv~1,Boston)
lm(medv~1,Boston)
step(lm(nedv~1,Boston),direction="forword")
step(lm(medv~1,Boston),direction="forword")
step(lm(medv~1,Boston),direction="forwrd")
step(lm(medv~1,Boston),direction="forward")
step(lm(medv~.,Boston),direction="forward")
step(lm(medv~.,Boston),scope=list(lower=~1,upper=~.),direction="forward")
t0 <- (lm1$coefficients[2]-(-0.8))/(sqrt(anova(lm1)["Residuals","Mean Sq"]/sxx))
t0
qt(0.95,10)
qt(0.05,10)
iris_lm <- lm(Sepal.Width~Pental.Length+Sepal.Lenth+Petal.Width,iris)
iris_lm <- lm(Sepal.Width~Petal.Length+Sepal.Lenth+Petal.Width,iris)
iris_lm <- lm(Sepal.Width~Petal.Length+Sepal.Length+Petal.Width,iris)
plot(iris_lm)
5
par(c(2,2))
par(nfrow=c(2,2))
par(mfrow=c(2,2))
plot(iris_lm)
library(rgl)
library(rgl)
plot3d(wt,disp,mpg,col='red',size=3)
attach(mtcars)
plot3d(wt,disp,mpg,col='red',size=3)
mypal= c('blue','red','green')
class(mtcars$cyl)
factor(mtcars$cyl)
a <- mypal[factor(mtcars$cyl)]
plot3d(wt,disp,mpg,col= a)
library(rgl)
z <- 2 * volcano
x <- 10 *(1:nrow(z))
y <- 10 *(1:nrow(z))
par(bg = 'slategray')
persp(x,y,z,theta = 135,phi = 30,col = 'green3',scale=FALSE,ltheta= -120,shade = 0.75,border = NA, box = FALSE)
z <- 2 * volcano # Exaggerate the relief
x <- 10 * (1:nrow(z)) # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z)) # 10 meter spacing (E to W)
par(bg = "slategray")
par(bg = "slategray")
persp(x, y, z, theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE)
persp3d(x, y, z, col = "green3")
par(bg = 'slategray')
persp(x,y,z,theta = 135,phi = 30,col = 'green3',scale=FALSE,ltheta= -120,shade = 0.75,border = NA, box = FALSE)
81/333
23/9667
9644/9667
getwd()
setwd("/Users/arnorfati/Documents/GitHub/SNU_BDI/데이터마이닝")
setwd("/Users/arnorfati/Documents/GitHub/SNU_BDI/데이터마이닝")
library(MASS)
library(ISLR)
install.packages('ISLR')
install.packages("ISLR")
library(ISLR)
attach(Boston)
Boston
?Boston
?boston
library(ISLR)
library(MASS)
?MASS
??MASS
fix(Boston)
names(Boston)
Boston
?fix
lm.fit = lm(medv~latat,data=Boston)
lm.fit = lm(medv~lstat,data=Boston)
lm.fit
summary(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval = 'confidence')
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval = 'prediction')
plot(lstat,medc)
plot(lstat,medv,data=Boston)
attach(Boston)
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd = 3,col = 'red')
plot(lm.fit)
5
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
hatvalues(lm.fit)
which.max(hatvalues(lm.fit))
lm.fit = lm(medv~lstat+age)
summary(lm.fit)
lm.fit - lm(medv~.)
lm.fit = lm(medv~.)
lm.fit = lm(medv~.,)
lm.fit = lm(medv~.,data = Boston)
install.packages('car')
library(car)
vif(car)
fix(car)
vif(lm.fit)
lm.fit = (medv~.-age,data = Boston)
lm.fit = (medv~.-age ,data = Boston)
lm.fit = lm(medv~.-age ,data = Boston)
lm.fit1 = lm(medv~.-age ,data = Boston)
lm.fit = lm(medv~.,data = Boston) # attach(Boston)을 했는데도 data= 를 작성해야 함...
summary(lm)
summary(lm.fit)
setwd("/Users/arnorfati/Documents/GitHub/SNU_BDI/데이터마이닝")
setwd("C:/Users/User/Documents/GitHub/SNU_BDI/데이터마이닝")
x <- c(1,3,2,5)
x
x = c(1,6,2)
y = c(1,4,3)
length(x)
x+y
ls()
rm(x,y)
rm(list = ls())
x <- matrix(data = c(1,2,3,4),2,2)
x
x <- matrix(data=c(1,2,3,4),2,2,byrow = TRUE)
x <- matrix(data=c(1,2,3,4),2,2,byrow = TRUE)
x
x^2
x
x_2 <- x^2
x_2
sqrt(x)
x = rnorm(50)
x
y = x +rnorm(50, mean = 50, sd = 1)
cor(x,y)
set.seed(50)
rnorm(50)
set.seed(1303)
rnorm(50)
y = x +rnorm(50, mean = 50, sd = 0.1) # R에서는 정규분포의 모수가 평균과 표준편차임 (원래는 평균과 분산)
cor(x,y)
set.seed(3)
y = rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x = rnorm
x = rnorm(100)
y = rnorm(100)
plot(x,y)
x = rnorm(50)
y = x +rnorm(50, mean = 50, sd = 0.1) # R에서는 정규분포의 모수가 평균과 표준편차임 (원래는 평균과 분산)
plot(x,y)
x = rnorm(100)
y = rnorm(100)
plot(x,y)
plot(x,y,xlab = 'This is xlab', ylab = 'This is ylab', main = 'Plot of X vs Y')
pdf('Figure.pdf')
plot(x,y,col = 'green')
dev.off()
x = seq(1,10)
x
x = 1:10
x = 1:10
x
x = seq(-pi,pi,length = 50)
x
y = x
?outer
outer(x,y)
outer(x,y,function(x,y)cos(y)/(1+x^2))
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30, phi = 20)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30, phi = 20)
persp(x,y,fa,theta=30, phi = 70)
persp(x,y,fa,theta=30, phi = 70)
persp(x,y,fa,theta=30, phi = 40)
persp(x,y,fa,theta=30, phi = 20)
persp(x,y,fa,theta=30, phi = 70)
persp(x,y,fa,theta=30, phi = 40)
A = matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[c(1,2),]
A[,1:2]
A[1,]
A[-c(1,3),]
dim(A)
Auto
data(Auto)
plot(cylinders,mpg)
library(ISLR)
Auto
head(Auto)
dim(Auto)
names(AUto)
names(Auto)
plot(Auto$cylinders,Auto$mpg)
attach(Auto)
plot(cylinders,mpg)
cylinders = as.factor(cylinders)
plot(cylinders,mpg)
hist(mpg)
his(mpg,col =2)
hist(mpg,col =2)
hist(mpg,col = 1)
plot(cylinders,mpg, col=1)
plot(cylinders,mpg, col=2)
plot(cylinders,mpg, col = 'red', varwidth = T)
plot(cylinders,mpg, col = 'red', varwidth = T, horizontal = T) # 분산의 넓이도 포함
plot(cylinders,mpg, col = 'red', varwidth = T) # 분산의 넓이도 포함
hist(mpg,col = 1,breaks=15)
hist(mpg,breaks=15)
hist(mpg,breaks=200)
hist(mpg,breaks=100)
pairs(Auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(mpg)
summary(Auto)
setwd("/Users/arnorfati/Documents/GitHub/SNU_BDI/데이터마이닝")
setwd("C:/Users/User/Documents/GitHub/SNU_BDI/데이터마이닝")
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
attach(Boston)
lm.fit = lm(medv~lstat,data=Boston)
lm.fit # 기본적인 정보만 알려줌
summary(lm.fit)
confint(lm.fit) # 계수 추정치에 대한 신뢰구간
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval = 'confidence')
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval = 'prediction')
plot(lstat,medv)
abline(lm.fit,lwd = 3,col = 'red')
par(mfrow=c(2,2))
plot(lm.fit) # 진단그래프
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit = lm(medv~lstat+age) # data = Boston을 안해도 됨( attach(Boston) 때문)
summary(lm.fit)
lm.fit = lm(medv~.,data = Boston) # attach(Boston)을 했는데도 data= 를 작성해야 함...
library(car)
lm.fit1 = update(lm.fit,~.-age)
