str(myFamily)
summary(myFamily)
myFamily[,2]
iris
head(iris)
str(iris)
ggplot(iris$Sepal.Length,iris$Sepal.Length)
gglots(iris$Sepal.Length,iris$Sepal.Length)
gglot
ggplot2(iris$Sepal.Length,iris$Sepal.Length)
ggplot(iris,iris$Sepal.Length,iris$Sepal.Width)
ggplot(iris$Sepal.Length,iris$Sepal.Width)
iris[1:15,]
seaosa <- iris[1:50,]
seaosa
sesosa <- setosa
sesosa -> setosa
esaosa <- setosa
esaosa -> setosa
seaosa -> setosa
dbinom(3,5,0.1)
dbinom(0:6,6,0.5)
pbinom(5,20,10)
pbinom(5,20,0.1)
1- bpinom(3,20,0.1)
1- pbinom(3,20,0.1)
rbinom(20,10,0.2)
a <- rbinom(20,10,0.2)
average(a)
mean(a)
pbinom(20,10,0.2)
pbinom(3,10,0.2)
dunif(1,0,10)
punif(1,0,2)
punif(2,0,2)
punif(0.3,0,2)
punif(0.4,0,2)
punif(0.5,0,2)
punif(0.8,0,2)
punif(0.8,0,2)
dnorm(14,20,2)
dnorm(19,20,2)
dnorm(20,20,2)
dnorm(0,0,1)
rnorm(20,0,1)
kor <- c(42,38,51,53,40,37,41,29,52,39,45,34,47,35,44,48,47,30,34)
eng <- c(30,25,34,35,31,29,33,23,36,30,32,29,34,30,28,29,33,24,30,30)
length(eng)
kor <- c(42,38,51,53,40,37,41,29,52,39,45,34,47,35,44,48,47,30,29,34)
kor
eng
cor.test(kor,eng)
cor.test(kor,eng,conf.level = 0.99)
lm(eng~kor)
summary <- lm(eng~kor)
result <- lm(eng~kor)
summary(result)
(0.7567478)^2
anova(result)
132.716/(132.716+99.034)
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
car_lm <- lm(price~year); summary(car_lm )
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
year <- c(1,1.5,2,2,3,3,3.2,4,4.5,5,5,5.5)
price <- c(4.5,4,3.2,3.4,2.5,2.3,2.3,1.6,1.5,1,0.8,0.4)
car_lm <- lm(price~year); summary(car_lm )
sxx <- sum(year^2) - 12*(mean(year)^2)
t0 <- (car_lm$coefficients[2]-(-0.8))/(sqrt(anova(car_lm)["Residuals","Mean Sq"]/sxx))
t0; t0 <= qt(0.05,10)
sxx
t0
t0 <= qt(0.05,10)
t0 <= qt(0.10,10)
qt(0.05,10)
car_lm
car_lm$coefficients
car_lm$coefficients[2]
car_lm$coefficients[2] - 0.8
car_lm$coefficients[2] - (-0.8)
anova(car_lm)
cor_lm["Residuals"]
car_lm["Residuals","Mean Sq"]
anova(car_lm)["Residuals","Mean Sq"]
anova(car_lm)["Residuals"]
anova(car_lm)
anova(car_lm)["Residuals"]
anova(car_lm)[Mean Sq"]
anova(car_lm)["Mean Sq"]
anova(car_lm)["Residuals",]
lm1 <- lm(price~year); summary(lm1 )
lm1$coefficients[2]
lm1$coefficients[1]
data.frame("year"=2.5)
predict(lm1,newdata=data.frame("year"=2.5),intervel="confidence")
predict(lm1,newdata=data.frame("year"=2.5),intervel="prediction")
predict(lm1,newdata=data.frame("year"=2.5),interval="prediction")
predict(lm1,newdata=data.frame("x"=2.5),interval="prediction")
x
newdata
confint(car_lm)
confint(car_lm,conf.level=0.94)
car_lm
year <- c(1,1.5,2,2,3,3,3.2,4,4.5,5,5,5.5)
price <- c(4.5,4,3.2,3.4,2.5,2.3,2.3,1.6,1.5,1,0.8,0.4)
?confint
confint(lm1,level=0.99)
plot(restudent(lm1))
plot(rstudent(lm1))
length(iris)
iris
lm(Sepal.Width~.,data=iris)
lm2 <- lm(Sepal.Width~.,data=iris)
summary(lm2)
library(MASS)
data(Boston)
Boston
summary(Boston)
a <- lm(medv~.,data=Boston)
a
step(a,direction="backward")
step(a,direction="forward")
step(a,scope=(~1,~.),direction="forward")
step(a,scope=(lower=~1,upper=~.),direction="forward")
step(a,scope=(lower=~1,upper=~.),direction="forward")
step(lm(medv ~1,data=Boston),scope=(lower=~1,upper=~.),direction="forward")
step(a,scope=(),direction="forward")
?step
step(a,direction="forward")
step(a,direction="both")
lm(nedv~1,Boston)
lm(medv~1,Boston)
step(lm(nedv~1,Boston),direction="forword")
step(lm(medv~1,Boston),direction="forword")
step(lm(medv~1,Boston),direction="forwrd")
step(lm(medv~1,Boston),direction="forward")
step(lm(medv~.,Boston),direction="forward")
step(lm(medv~.,Boston),scope=list(lower=~1,upper=~.),direction="forward")
t0 <- (lm1$coefficients[2]-(-0.8))/(sqrt(anova(lm1)["Residuals","Mean Sq"]/sxx))
t0
qt(0.95,10)
qt(0.05,10)
iris_lm <- lm(Sepal.Width~Pental.Length+Sepal.Lenth+Petal.Width,iris)
iris_lm <- lm(Sepal.Width~Petal.Length+Sepal.Lenth+Petal.Width,iris)
iris_lm <- lm(Sepal.Width~Petal.Length+Sepal.Length+Petal.Width,iris)
plot(iris_lm)
5
par(c(2,2))
par(nfrow=c(2,2))
par(mfrow=c(2,2))
plot(iris_lm)
library(rgl)
library(rgl)
plot3d(wt,disp,mpg,col='red',size=3)
attach(mtcars)
plot3d(wt,disp,mpg,col='red',size=3)
mypal= c('blue','red','green')
class(mtcars$cyl)
factor(mtcars$cyl)
a <- mypal[factor(mtcars$cyl)]
plot3d(wt,disp,mpg,col= a)
library(rgl)
z <- 2 * volcano
x <- 10 *(1:nrow(z))
y <- 10 *(1:nrow(z))
par(bg = 'slategray')
persp(x,y,z,theta = 135,phi = 30,col = 'green3',scale=FALSE,ltheta= -120,shade = 0.75,border = NA, box = FALSE)
z <- 2 * volcano # Exaggerate the relief
x <- 10 * (1:nrow(z)) # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z)) # 10 meter spacing (E to W)
par(bg = "slategray")
par(bg = "slategray")
persp(x, y, z, theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE)
persp3d(x, y, z, col = "green3")
par(bg = 'slategray')
persp(x,y,z,theta = 135,phi = 30,col = 'green3',scale=FALSE,ltheta= -120,shade = 0.75,border = NA, box = FALSE)
c(1,1,0,1,1)
dbinom(y, size = 1, prob = 0.5, log = TRUE )
loglike  <- like <- c()
theta.vec <- seq(0,1,length = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dbinom(y, size = 1, prob = theta, log = FALSE ))
loglike[i] <- sum(dbinom(y, size = 1, prob = theta, log = TRUE ))
}
plot(theta.vec, loglike, type = 'l', col = 'blue')
plot(theta.vec, like, type = 'l', col = 'blue')
c(1,1,0,1,1)
dbinom(y, size = 1, prob = 0.5, log = TRUE )
y = c(1,1,0,1,1)
dbinom(y, size = 1, prob = 0.5, log = TRUE )
loglike  <- like <- c()
theta.vec <- seq(0,1,length = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dbinom(y, size = 1, prob = theta, log = FALSE ))
loglike[i] <- sum(dbinom(y, size = 1, prob = theta, log = TRUE ))
}
plot(theta.vec, loglike, type = 'l', col = 'blue')
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'blue')
plot(theta.vec, like, type = 'l', col = 'blue')
n = 1000
y <- rbinom(n,size = 1, prob = 0.25)
loglike  <- like <- c()
theta.vec <- seq(0,1,length = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dbinom(y, size = 1, prob = theta, log = FALSE ))
loglike[i] <- sum(dbinom(y, size = 1, prob = theta, log = TRUE ))
}
plot(theta.vec, loglike, type = 'l', col = 'blue')
plot(theta.vec, like, type = 'l', col = 'blue')
length(y == 1)/length(y)
length(y == 1)
length(y == 0)
length(y)
y
length(y[y==0])/length(y)
length(y[y==2])/length(y)
length(y[y==1])/length(y)
y<- c(0.1,0.5,0.3,0.15,0.2)
sigma.vec <- seq(0.1,0.3, length = n)
mu.vec <-  seq(0,0.5, length = n)
z <- matrix(0,n,n)
for (i in 1:n)
for (j in 1:n)
z[i,j] <- sum(dnorm(y,
mu.vec[i], sigma.vec[j],
log = T), na.rm = T)
filled.contour(mu.vec, sigma.vec, z, nlevels = 20,
col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, z, nlevels = 20,
col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, z, nlevels = 20,
col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, z, nlevels = 20,
col = heat.colors(3))
asd <- c(1,2,3,1,1)
x = c()
n = 1000
testResult <- rep(0,n)
for (i in 1:n)
{
x <- rep(0,20)
for (j in 2:20) x[j] <- 0.9*x[j-1] + rnorm(1)
testfit <- t.test(x,mu=0)
testResult[i] <- testfit$p.value
}
mean(testResult>0.05)
testResult
testResult[testResult<= 0.05]
length(testResult[testResult<= 0.05])
mean(testResult>0.05)
set.seed(1)
iter.num = 1000
rho.vec = seq(-0.7, 0.7, by = 0.1 )
coef.mat <- matrix(0,iter.num, length(rho.vec))
for (j in 1:length(rho.vec))
{
rho = rho.vec[j]
Sigma.mat <- matrix(c(1,rho,rho,1),2,2)
for (i in 1:iter.num)
{
x <- mvrnorm(n, mu.vec, Sigma.mat)
y<- x%*%c(1,1) + rnorm(100)
fit <- lm(y~x[,1]-1)
coef.mat[i,j]<- fit$coefficients
}
}
library(MASS)
for (j in 1:length(rho.vec))
{
rho = rho.vec[j]
Sigma.mat <- matrix(c(1,rho,rho,1),2,2)
for (i in 1:iter.num)
{
x <- mvrnorm(n, mu.vec, Sigma.mat)
y<- x%*%c(1,1) + rnorm(100)
fit <- lm(y~x[,1]-1)
coef.mat[i,j]<- fit$coefficients
}
}
setwd('C:/Users/User/Documents/GitHub/SNU_BDI/탐색적분석_시각화')
setwd('/Users/arnorfati/Documents/GitHub/SNU_BDI/탐색적분석_시각화')
skilldata = read.csv('SkillCraft1_Dataset.csv',stringsAsFactors = F, na.strings = c('?'))
table_League = table(skilldata$LeagueIndex)
barplot(table_League, main = 'LeagueIndex',names.arg = table.name,col = c('saddle brown','Azure 3','gold3','light cyan','alice blue','light sky blue',' royal blue','midnight blue'))
table.name = c('Bronze','Silver','Gold','Platinum','Diamond','Master','GrandMaster','Pro')
barplot(table_League, main = 'LeagueIndex',names.arg = table.name,col = c('saddle brown','Azure 3','gold3','light cyan','alice blue','light sky blue',' royal blue','midnight blue'))
n = 1e+4
z =rexp(n)
z
?rexp
paste('감자로','만든','감자칩',sep ='')
lambda <- 1
for (i in 1:10)
{
save.image(paste0('result_',i,'.Rata')
}
for (i in 1:10){
save.image(paste0('result_',i,'.Rata')
}
for (i in 1:10)
{
save.image(paste0('result_',i,'.Rata')
}
for(i in 1:10)
for(i in 1:10){
lambda <- i
save.image(paste0('result_',i,'.Rata')
}
a <- readLines('result_1.Rdata)
a[4] <- c('for (i in 2)')
#
cat (a,file = 'test-1.R)
for(i in 1:10){
lambda <- i
save.image(paste0('result_',i,'.Rata')
}
source(paste0('test-',i,'.R'))
a <- readLines('result_1.Rdata')
a[4] <- c('for (i in 2)')
#
cat (a,file = 'test-1.R' sep='\n')
paste('감자로','만든','감자칩',sep ='')
#test
lambda <- 1
for (i in 1:10)
{
lambda <- i
save.image(paste0('result_',i,'.Rata')
}
for (i in 1:10)
{
lambda <- i
save.image(paste0('result_',i,'.Rata')
}
for (i in 1:10){
lambda <- i
save.image(paste0('result_',i,'.Rata')
}
save.image(paste0('result_',i,'.Rata')
}
save.image(paste0('result_',i,'.Rata')}
save.image(paste0('result_',i,'.Rata'))}
{
lambda <- i
save.image(paste0('result_',i,'.Rata'))
}
paste('감자로','만든','감자칩',sep ='')
lambda <- 1
for (i in 1:10)
{
lambda <- i
save.image(paste0('result_',i,'.Rata'))
}
source(paste0('test-',i,'.R'))
a <- readLines('result_1.Rdata')
getwd()
source(paste0('test-',i,'.R'))
source(paste0('result_',i,'.Rata'))
a <- readLines('result_1.Rdata')
a <- readLines('result_1.Rata')
a <- readLines('result_1.Rata')
a
a[4] <- c('for (i in 2)')
cat (a,file = 'test-1.R' sep='\n')
paste(1:4,5:8,sep = ';')
paste(1:4,5:8,sep=';',collapse= '-')
grep('pole',c('Equator','North Pole','South pole','poles'))
substr('한글 문자열 추출', star=2,stop=4)
source(paste0('result_',i,'.Rata'))
a <- readLines('result_1.Rata')
for (i in 1:10)
{
lambda <- i
save.image(paste0('result_',i,'.Rdata'))
}
a <- readLines('result_1.Rata')
a
strplit('6*16*2011',split = "*",fixed = TRUE)
strsplit('6*16*2011',split = "*",fixed = TRUE)
strsplit('6*16*2011',split = "*")
strsplit('6*16*2011',split = "*",split = '\\*')
strsplit('6*16*2011',split = '\\*')
for (i in 1:10) paste(i)
for (i in 1:10) cat(paste(i))
for (i in 1:10) cat(i)
for (i in 1:10) cat(paste(i,'\n')
for (i in 1:10) cat(paste(i,'\n'))
for (i in 1:10) cat(paste(i,'\n'))
for (i in 1:10) cat(paste(i,'\t'))
list.files()
strsplit(list.files(), split = '.', fixed = TRUE)
regexpr('감자','맛있는 감자칩')
attr(a,'match.length')
a<-regexpr('감자','맛있는 감자칩')
attr(a,'match.length')
a <- gregexpr('감자','감자를 감자마자 감자칩을 먹었다.')
a
grep(pattern = '^(감자)',x = '감자는 고구마를 좋아해')
grep(pattern = '$(좋아해)',x = '감자는 고구마를 좋아해')
grep(pattern = '(좋아해)$',x = '감자는 고구마를 좋아해')
grep(pattern = '^(감자)',x = '고구마는 감자를 안좋아해')
grep(pattern = '(좋아해)$',x = '고구마는 감자를 안좋아해')
gregexpr(pattern = '[아자차카]', x = '고구마는 감자를 안좋아해')
gregexpr(pattern = '[아자차카]', text = '고구마는 감자를 안좋아해')
regexpr(pattern = '[아자차카]', text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '[아(자차카)]', text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '[아,(자차카)]', text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '[(사과)(감자)(양파)]',text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '^[(사과)(감자)(양파)]',text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '^[^(사과)(감자)(양파)]',text = '고구마는 감자를 안좋아해')
gregexpr(pattern = '^[^(사과)(감자)(양파)]',text = '고구마는 감자를 안좋아해')
grege(pattern = '^[^(사과)(감자)(양파)]',ㅌ = '고구마는 감자를 안좋아해')
grege(pattern = '^[^(사과)(감자)(양파)]',x = '고구마는 감자를 안좋아해')
gregp(pattern = '^[^(사과)(감자)(양파)]',x = '고구마는 감자를 안좋아해')
grep(pattern = '^[^(사과)(감자)(양파)]',x = '고구마는 감자를 안좋아해')
grep(pattern = '^ab{2,3}',x = 'ab')
^[1-9][0-9]*$
library(rvest)
install.packages(rvest)
install.packages('rvest')
library(rvest)
install.packages('xml2')
install.packages("xml2")
library(rvest)
library(xml2)
library(rvest)
url_tvcast = 'http://tv.naver.com/jtbc.youth'
html_tvcast = read_html(x = url_tvcast,encoding = 'UTF-8')
url_tvcast = 'http://tv.naver.com/jtbc.youth'
html_tvcast = read_html(x = url_tvcast,encoding = 'UTF-8')
html_tvcast %>% html_nodes('.title a') %>% head(n=3)
html_tvcast %>% html_nodes('.title a') %>% html_text() %>% head(n=3) # class 속에 tilte을 가지고 있는 a 태그
html_tvcast %>% html_nodes('.title a') %>% html_text()
url_tvcast = 'http://tv.naver.com/mbc.kingloves'
html_tvcast = read_html(x = url_tvcast,encoding = 'UTF-8')
html_tvcast %>% html_nodes('.title a') %>% html_text() %>% head(n=3) # class 속에 tilte을 가지고 있는 a 태그
html_tvcast %>% html_nodes('.title a') %>% html_text() %>%data.frame() %>% head(n=3) # class 속에 tilte을 가지고 있는 a 태그
html_tvcast %>% html_nodes('.title a') %>% html_text() %>% head(n = 3) # class 속에 tilte을 가지고 있는 a 태그
url_tvcast = 'https://en.wikipedia.org/wiki/Student%27s_t-distribution'
html_tvcast = read_html(x = url_tvcast,encoding = 'UTF-8')
html_tvcast %>% html_nodes('.title wikitable') %>% html_text() %>% head(n = 3) # class 속에 tilte을 가지고 있는 a 태그
html_wiki %>% html_nodes('. wikitable') %>% html_table() %>% head(n = 3) # class 속에 tilte을 가지고 있는 a 태그
url_wiki = 'https://en.wikipedia.org/wiki/Student%27s_t-distribution'
html_wiki = read_html(x = url_tvcast,encoding = 'UTF-8')
html_wiki %>% html_nodes('. wikitable') %>% html_table() %>% head(n = 3) # class 속에 tilte을 가지고 있는 a 태그
html_wiki %>% html_nodes('. wikitable') %>% html_table()
html_wiki = read_html(x = url_tvcast,encoding = 'UTF-8')
html_wiki
html_wiki %>% html_nodes('.wikitable') %>% html_table()
tb <- html_wiki %>% html_nodes('.wikitable') %>% html_table() %>% data,frame()
str(tb)
tb <- html_wiki %>% html_nodes('.wikitable') %>% html_table() %>% data.frame()
str(tb)
tb <- as.numeric(tb)
str(tb)
tb <- as.numeric(tb)
url_mlb = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html_mlb = read_html(x = url_wiki, encoding = 'URF=8')
html_wiki %>% html_nodes('.table_outer_container mobile_table') %>% html_table() %>% data.frame()
html_mlb = read_html(x = url_wiki, encoding = 'URF=8')
html_wiki %>% html_nodes('.table_outer_container mobile_table') %>% html_table() %>% data.frame()
html_wiki %>% html_nodes('div#all_teams_standard_batting') %>% html_table() %>% data.frame()
url_mlb = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html_mlb
html_wiki %>% html_nodes('div#div_all_teams_standard_batting') %>% html_table() %>% data.frame()
html_mlb %>% html_nodes('div#div_all_teams_standard_batting') %>% html_table() %>% data.frame()
html_mlb %>% html_nodes('div#all_teams_standard_batting') %>% html_table() %>% data.frame()
html_mlb %>% html_nodes('.table_outer_container mobile_table') %>% html_table() %>% data.frame()
html_mlb = read_html(x = url_wiki, encoding = 'URF=8')
html_mlb = read_html(x = url_mlb, encoding = 'URF=8')
url_mlb = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html_mlb = read_html(x = url_mlb, encoding = 'URF=8')
html_mlb %>% html_nodes('.table_outer_container mobile_table') %>% html_table() %>% data.frame()
html_mlb %>% html_nodes('div#div_teams_standard_btting table') %>% html_table() %>% data.frame()
url_mlb = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html_mlb = read_html(x = url_mlb, encoding = 'URF=8')
html_mlb
html_mlb %>% html_nodes('div#div_teams_standard_batting table') %>% html_table() %>% data.frame()
html %>% html_nodes('table.table_develop3') %>% html_table(hearder = FALSE, fill=TRUE) %>% data.frame()
Sys.setlocale('LC_ALL','English')
Sys.setlocale('LC_ALL','English')
Sys.getlocale()
url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.08.07%3A00&x=22&y=9'
html = read_html(x = url, encoding = 'URF-8')
url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.08.07%3A00&x=22&y=9'
html = read_html(x = url, encoding = 'URF-8')
url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.08.07'
html = read_html(x = url, encoding = 'URF-8')
url_mlb = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html_mlb = read_html(x = url_mlb, encoding = 'URF-8')
url = 'https://www.baseball-reference.com/leagues/MLB/2017.shtml'
html = read_html(x = url, encoding = 'URF-8')
url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp?auto_man=m&type=t99&tm=2017.09.08.07'
html = read_html(x = url, encoding = 'URF-8')
html = read_html(x = url, encoding = 'EUC-KR')
html
html %>% html_nodes('table.table_develop3') %>% html_table(hearder = FALSE, fill=TRUE) %>% data.frame()
Sys.setlocale('LC_ALL','Korean')
html %>% html_nodes('table.table_develop3') %>% html_table(header = FALSE, fill=TRUE) %>% data.frame()
tmp <- html %>% html_nodes('table.table_develop3') %>% html_table(header = FALSE, fill=TRUE) %>% data.frame()
head(tmp)
