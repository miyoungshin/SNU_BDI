nc <- NbClust(RFM.train$monetary, min.nc=2, max.nc=6, method="kmeans")
recency.kmeans <- kmeans(RFM.train$recency, centers = 3, iter.max = 10000)
recency.kmeans
nc <- NbClust(RFM.train$recency, min.nc=2, max.nc=6, method="kmeans")
nc <- NbClust(RFM.train$frequency, min.nc=2, max.nc=6, method="kmeans")
nc <- NbClust(RFM.train$monetary, min.nc=2, max.nc=6, method="kmeans")
recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM$recency.kmeans <- recency.kmeans
RFM$frequency.kmeas <- frequency.kmeans
RFM$monetary.kmeans <- monetary.kmeans
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM <- read.csv('mailorder.csv',header = TRUE)
set.seed(1)
recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM$recency.kmeans <- recency.kmeans
RFM$frequency.kmeas <- frequency.kmeans
RFM$monetary.kmeans <- monetary.kmeans
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict$predict.kmeans = Q5.predict$purchase
Q5.predict = Q5.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q5.predict, by =c('recency.kmeans','monetary.kmeans','frequency.kmeans'),all.x = TRUE)
Q5.predict
RFM <- read.csv('mailorder.csv',header = TRUE)
set.seed(1)
recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM$recency.kmeans <- recency.kmeans
RFM$frequency.kmeas <- frequency.kmeans
RFM$monetary.kmeans <- monetary.kmeans
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
a
RFM <- read.csv('mailorder.csv',header = TRUE)
set.seed(1)
RFM$recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
RFM$frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
RFM$monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
rm(list=ls())
RFM <- read.csv('mailorder.csv',header = TRUE)
set.seed(1)
RFM$recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
RFM$frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
RFM$monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
RFM.train
RFM$recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
RFM$frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
RFM$monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
RFM
RFM$recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
recency.kmeans <- kmeans(RFM$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM$recency.kmeans <- recency.kmeans
RFM$frequency.kmeas <- frequency.kmeans
RFM$monetary.kmeans <- monetary.kmeans
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
recency.kmeans <- kmeans(RFM.train$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.train$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.train$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.train$recency.kmeans <- recency.kmeans
RFM.train$frequency.kmeas <- frequency.kmeans
RFM.train$monetary.kmeans <- monetary.kmeans
recency.kmeans <- kmeans(RFM.vali$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.vali$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.vali$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.vali$recency.kmeans <- recency.kmeans
RFM.vali$frequency.kmeans <- frequency.kmeans
RFM.vali$monetary.kmeans <- monetary.kmeans
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict$predict.kmeans = Q5.predict$purchase
Q5.predict = Q5.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q5.predict, by =c('recency.kmeans','monetary.kmeans','frequency.kmeans'),all.x = TRUE)
Q5.predict
a <- Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
write.csv(a,'a.csv')
write.csv(a,'a.csv')
mean(Q5.result)
Q5.result = RFM.vali[1:500,10]
mean(Q5.result)
Q5.result = RFM.vali[1:500,10]
mean(Q5.result)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q1.result <- sample(RFM.vali$purchase,500)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM$recency2 <-  cut(RFM$recency, breaks = c(0,12,36),include.lowest = FALSE, right = TRUE,labels = c('2','1'))
RFM$frequency2 <- cut(RFM$frequency,breaks = c(0,3,12),include.lowest = FALSE, right = TRUE,labels = c('1','2'))
RFM$recency2 <-  cut(RFM$recency, breaks = c(0,12,36),include.lowest = FALSE, right = TRUE,labels = c('2','1'))
RFM$frequency2 <- cut(RFM$frequency,breaks = c(0,3,12),include.lowest = FALSE, right = TRUE,labels = c('1','2'))
RFM$monetary2 <- cut(RFM$monetary, breaks = c(0,209,478),include.lowest = FALSE, right = TRUE,labels = c('1','2'))
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q2.predict <- aggregate(formula = purchase ~ recency2+monetary2+frequency2,data = RFM.train,FUN = mean)
Q2.predic
Q2.predict
Q2.predict$predict222 <- Q2.predict$purchase
Q2.predict <- Q2.predict[,-4]
Q2.predict
RFM.vali = merge(x=RFM.vali,y=Q2.predict, by =c('recency2','monetary2','frequency2'),all.x = TRUE)
RFM.vali
RFM.vali = arrange(RFM.vali,desc(predict222))
Q2_1 = RFM.vali[1:361,10]
Q2_2 = sample(RFM.vali[362:644,10],139)
Q2.result <- c(Q2_1,Q2_2)
mean(Q2.result)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM$recency3 <-  cut(RFM$recency, breaks = c(0,4,8,12,16,36),include.lowest = FALSE, right = TRUE,labels = c('5','4','3','2','1'))
RFM$frequency3 <- cut(RFM$frequency,breaks = c(0,1,2,5,9,12),include.lowest = FALSE, right = TRUE,labels = c('1','2','3','4','5'))
RFM$monetary3 <- cut(RFM$monetary, breaks = c(0,113,181,242,299,478),include.lowest = FALSE, right = TRUE,labels = c('1','2','3','4','5'))
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q3.predict <- aggregate(formula = purchase ~ recency3+monetary3+frequency3,data = RFM.train,FUN = mean) # RFM 그룹 별 반응
Q3.predict$predict555 = Q3.predict$purchase # merge를 위한 전처리
Q3.predict = Q3.predict[,-4] # merge를 위한 전처리
RFM.vali = merge(x=RFM.vali,y=Q3.predict, by =c('recency3','monetary3','frequency3'),all.x = TRUE) #vali의 그룹 별 예측값 적용
RFM.vali = arrange(RFM.vali,desc(predict555))
Q3.result = RFM.vali[1:500,10]
mean(Q3.result)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
Q2.predict <- aggregate(formula = purchase ~ recency2+monetary2+frequency2,data = RFM.train,FUN = mean)
Q2.predict$predict222 <- Q2.predict$purchase
Q2.predict <- Q2.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q2.predict, by =c('recency2','monetary2','frequency2'),all.x = TRUE)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
recency.kmeans <- kmeans(RFM.train$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.train$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.train$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.train$recency.kmeans <- recency.kmeans
RFM.train$frequency.kmeas <- frequency.kmeans
RFM.train$monetary.kmeans <- monetary.kmeans
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
recency.kmeans <- kmeans(RFM.vali$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.vali$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.vali$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.vali$recency.kmeans <- recency.kmeans
RFM.vali$frequency.kmeans <- frequency.kmeans
RFM.vali$monetary.kmeans <- monetary.kmeans
RFM.vali <- data.frame(RFM.vali,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict$predict.kmeans = Q5.predict$purchase
Q5.predict = Q5.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q5.predict, by =c('recency.kmeans','monetary.kmeans','frequency.kmeans'),all.x = TRUE)
RFM.vali = arrange(RFM.vali,desc(predict.kmeans))
Q5.result = RFM.vali[1:500,10]
mean(Q5.result)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
set.seed(10)
recency.kmeans <- kmeans(RFM.train$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.train$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.train$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.train$recency.kmeans <- recency.kmeans
RFM.train$frequency.kmeas <- frequency.kmeans
RFM.train$monetary.kmeans <- monetary.kmeans
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
recency.kmeans <- kmeans(RFM.vali$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.vali$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.vali$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.vali$recency.kmeans <- recency.kmeans
RFM.vali$frequency.kmeans <- frequency.kmeans
RFM.vali$monetary.kmeans <- monetary.kmeans
RFM.vali <- data.frame(RFM.vali,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict$predict.kmeans = Q5.predict$purchase
Q5.predict = Q5.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q5.predict, by =c('recency.kmeans','monetary.kmeans','frequency.kmeans'),all.x = TRUE)
RFM.vali = arrange(RFM.vali,desc(predict.kmeans))
Q5.result = RFM.vali[1:500,10]
mean(Q5.result)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
set.seed(10)
recency.kmeans <- kmeans(RFM.train$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.train$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.train$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.train$recency.kmeans <- recency.kmeans
RFM.train$frequency.kmeas <- frequency.kmeans
RFM.train$monetary.kmeans <- monetary.kmeans
RFM.train <- data.frame(RFM.train,recency.kmeans,frequency.kmeans,monetary.kmeans)
recency.kmeans <- kmeans(RFM.vali$recency, centers = 3, iter.max = 10000)
recency.kmeans <- recency.kmeans$cluster
frequency.kmeans <- kmeans(RFM.vali$frequency, centers = 3, iter.max = 10000)
frequency.kmeans <- frequency.kmeans$cluster
monetary.kmeans <- kmeans(RFM.vali$monetary, centers = 3, iter.max = 10000)
monetary.kmeans <- monetary.kmeans$cluster
RFM.vali$recency.kmeans <- recency.kmeans
RFM.vali$frequency.kmeans <- frequency.kmeans
RFM.vali$monetary.kmeans <- monetary.kmeans
RFM.vali <- data.frame(RFM.vali,recency.kmeans,frequency.kmeans,monetary.kmeans)
Q5.predict <- aggregate(formula = purchase ~ recency.kmeans+monetary.kmeans+frequency.kmeans,data = RFM.train,FUN = mean)
Q5.predict$predict.kmeans = Q5.predict$purchase
Q5.predict = Q5.predict[,-4]
RFM.vali = merge(x=RFM.vali,y=Q5.predict, by =c('recency.kmeans','monetary.kmeans','frequency.kmeans'),all.x = TRUE)
RFM.vali = arrange(RFM.vali,desc(predict.kmeans))
Q5.result = RFM.vali[1:500,10]
mean(Q5.result)
set.seed(10)
Q1.result <- sample(RFM.vali$purchase,500)
mean(Q1.result) # 기준점이 되는 값
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
set.seed(10)
Q1.result <- sample(RFM.vali$purchase,500)
mean(Q1.result) # 기준점이 되는 값
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
set.seed(10)
Q1.result <- sample(RFM.vali$purchase,500)
mean(Q1.result) # 기준점이 되는 값
View(RFM.train)
Sys.setlocale("LC_ALL", "Korean")
install.packages('httr')
library(httr)
library(rvest)
client_id = 'aaoFMXW56HWyxt1gsLqj';
client_secret = 'bbx6GpYpRw';
rm(list = ls())
library(httr)
library(rvest)
Sys.setlocale("LC_ALL", "Korean")
client_id = '';
client_secret = '';
# add header? (add information of id and password)
header = httr::add_headers('X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
query.n =  query = '허니버터칩'
# convert encoding
query = iconv(query, to = 'UTF-8', toRaw = T)
query = paste0('%', paste(unlist(query), collapse = '%'))
query = toupper(query)
# make URL
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
title = url_body %>% xml_nodes('item title') %>%
xml_text()
bloggername = url_body %>%
xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>%
xml_text()
link = url_body %>% xml_nodes('item link') %>%
xml_text()
description = url_body %>% xml_nodes('item description') %>%
html_text()
# loop code
final_dat = NULL
for(i in 1:length(start_point))
{
# request xml format
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
#option header
url_body = read_xml(GET(url, header), encoding = "UTF-8")
title = url_body %>% xml_nodes('item title') %>% xml_text()
bloggername = url_body %>% xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>% xml_text()
link = url_body %>% xml_nodes('item link') %>% xml_text()
description = url_body %>% xml_nodes('item description') %>% html_text()
temp_dat = cbind(title, bloggername, postdate, link, description)
final_dat = rbind(final_dat, temp_dat)
cat(i, '\n')
}
final_dat = data.frame(final_dat, stringsAsFactors = F)
library(dplyr)
tb <- table(final_dat[,2])
top.blogger<- sort(tb, decreasing = T)[1:4]
tmp <- final_dat %>% select(bloggername, link) %>%
filter(bloggername %in% names(top.blogger) )
tb <- table(final_dat$postdate)
head(tb)
names(tb) %>%head() # 문자열로 데이터 정리
x <- as.Date(names(tb), format = '%Y%m%d')
y <- as.numeric(tb) # 검색량
# 데이터의 날짜에 관한 전처리
?strptime
plot(x,y,pch = 19,cex = 0.5)
install.packages('pspline')
library(pspline)
fit <- sm.spline(x = as.integer(x),y= y,cv=TRUE) #smooth spline
lines(x =x , y = fit$ysmth, lty = 2, lwd = 2, col = 'blue')
as.Date('2017-09-12') - as.Date('1990-05-11')
str(fit)
x[1]
as.integer(x[1])
as.Date(as.integer(x[1]), origin = '1970-01-01')
as.Date(500,origin = '1970-01-01')
# 빈 날짜를 0으로 채우기
x <- min(x):max(x)
xx <- as.Date(as.integer(min(x)):as.integer(max(x)),origin = '1970-01-01' )
xx
yy <- rep(0,length(xx))
yy[xx%in%x] <- y # %in% 함수 활용하기
plot(xx,yy,pch = 19, cex = 0.5)
fit <- sm.spline(x = as.integer(xx),y= yy,cv=TRUE) #smooth spline
lines(x =xx , y = fit$ysmth, lty = 2, lwd = 2, col = 'blue')
install.packages("httr")
install.packages("pspline")
library(httr)
library(rvest)
client_id = 'aaoFMXW56HWyxt1gsLqj';
client_secret = 'bbx6GpYpRw';
rm(list = ls())
library(httr)
library(rvest)
Sys.setlocale("LC_ALL", "Korean")
header = httr::add_headers('X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
query.n =  query = '허니버터칩'
query = iconv(query, to = 'UTF-8', toRaw = T)
query = paste0('%', paste(unlist(query), collapse = '%'))
query = toupper(query)
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
title = url_body %>% xml_nodes('item title') %>%
xml_text()
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
header = httr::add_headers('X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
client_id = 'aaoFMXW56HWyxt1gsLqj';
client_secret = 'bbx6GpYpRw';
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
client_id = 'aaoFMXW56HWyxt1gsLqj';
client_secret = 'bbx6GpYpRw';
Sys.setlocale("LC_ALL", "Korean")
header = httr::add_headers('X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
query.n =  query = '허니버터칩'
query = iconv(query, to = 'UTF-8', toRaw = T)
query = paste0('%', paste(unlist(query), collapse = '%'))
query = toupper(query)
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
title = url_body %>% xml_nodes('item title') %>%
xml_text()
bloggername = url_body %>%
xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>%
xml_text()
link = url_body %>% xml_nodes('item link') %>%
xml_text()
description = url_body %>% xml_nodes('item description') %>%
html_text()
final_dat = NULL
for(i in 1:length(start_point))
{
# request xml format
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
#option header
url_body = read_xml(GET(url, header), encoding = "UTF-8")
title = url_body %>% xml_nodes('item title') %>% xml_text()
bloggername = url_body %>% xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>% xml_text()
link = url_body %>% xml_nodes('item link') %>% xml_text()
description = url_body %>% xml_nodes('item description') %>% html_text()
temp_dat = cbind(title, bloggername, postdate, link, description)
final_dat = rbind(final_dat, temp_dat)
cat(i, '\n')
}
final_dat = data.frame(final_dat, stringsAsFactors = F)
library(dplyr)
tb <- table(final_dat[,2])
top.blogger<- sort(tb, decreasing = T)[1:4]
tmp <- final_dat %>% select(bloggername, link) %>%
filter(bloggername %in% names(top.blogger) )
tb <- table(final_dat$postdate)
head(tb)
names(tb) %>%head() # 문자열로 데이터 정리
x <- as.Date(names(tb), format = '%Y%m%d')
y <- as.numeric(tb) # 검색량
?strptime
plot(x,y,pch = 19,cex = 0.5)
install.packages('pspline')
library(pspline)
install.packages("pspline")
fit <- sm.spline(x = as.integer(x),y= y,cv=TRUE) #smooth spline
lines(x =x , y = fit$ysmth, lty = 2, lwd = 2, col = 'blue')
as.Date('2017-09-12') - as.Date('1990-05-11')
str(fit)
final_dat[10,5]
a <- gsub(pattern = "<[/?A-Za-z]*>",
replace = "", final_dat[10,5])
a
library(KoNLP)
useSejongDic()
install.packages('rJava')
library(tm)
install.packages('tm')
library(tm)
library(KoNLP)
u
useSejongDic()
install.packages(boot)
install.packages('boot')
library(boot)
set.seed(10)
RFM <- read.csv('mailorder.csv',header = TRUE)
RFM.train = RFM[1:2000,]
RFM.vali = RFM[2001:4000,]
lm.fit <- glm(purchase~recency+monetary+frequency,data = RFM.train)
ev.err <- cv.glm(RFM,lm.fit,K=10)$delta[1]
ev.er
ev.err
lm.fit <- glm(purchase~recency+monetary+frequency,data = RFM.train)
ev.err <- cv.glm(RFM,lm.fit,K=10)$delta[1]
ev.err
lm.fit
cv.glm(RFM,lm.fit,K=10)
lm.fit <- glm(purchase~recency+monetary+frequency,data = RFM.train)
ev.err <- cv.glm(RFM.train,lm.fit,K=10)$delta[1]
ev.err
lm.fit <- glm(purchase~recency+monetary+frequency,data = RFM.train)
summary(lm.fit)
mean(purchase-predict(lm.fit,RFM.vali)^2)
mean(RFM.vali$purchase-predict(lm.fit,RFM.vali)^2)
ev.err <- cv.glm(RFM.vali,lm.fit,K=10)$delta[1]
ev.err
lm.fit <- glm(purchase~recency+monetary+frequency,data = RFM.train)
ev.err <- cv.glm(RFM.vali,lm.fit,K=20)$delta[1]
ev.err
lm.fit <- glm(purchase~.,data = RFM.train)
summary(lm.fit)
mean(RFM.vali$purchase-predict(lm.fit,RFM.vali)^2)
intall.packages('leaps')
install.packages('leaps')
library(leaps)
regfit.full <- regsubsets(purchase~.,RFM.vali)
summary(regfit.full)
reg.summary = summary(regfit.full)
names(reg.summary)
reg.summary$rsq
