data_set$AGE
data_set[data_set$AGE == '*',52] <- '0'
setwd('C:/Users/User/Desktop/')
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set$AGE
data_set[data_set$AGE == '0',52]
data_set[,52] <- as.integer(data_set[,52],)# 변수 타입 변경(chr -> int)
data_set[,52]
data_set[,52] <- as.factor(data_set[,52])
data_set[,52]
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE <- cut(data_set$AGE,breaks = c(20,25,35,60),include.lowest = FALSE, right = TRUE,lsbels = c('20-25','25-35','36-60','61이상'))
data_set$AGE
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE <- cut(data_set$AGE,  breaks = c(20,25,35,60),include.lowest = FALSE, right = TRUE,labels = c('20-25','25-35','36-60','61이상'))
data_set$AGE <- cut(data_set$AGE,  breaks = c(20,25,35,60,70),include.lowest = FALSE, right = TRUE,labels = c('20-25','25-35','36-60','61이상'))
data_set$AGE
table(data_set$AGE)
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
RFM$monetary2 <- cut(RFM$monetary, breaks = c(0,209,478),include.lowest = FALSE, right = TRUE,labels = c('1','2'))
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(20,25,35,60,70),include.lowest = FALSE, right = TRUE,labels = c('20-25','25-35','36-60','61이상'))
table(data_set$AGE_cut)
barplot(data_set$AGE_cut)
hist(data_set$AGE_cut)
barplot(table(data_set$AGE_cut))
data_set[data_set$AGE_cut == '20-25',c(2:15,24,26:51)]
data_set$AGE_cut
data_set$AGE_cut == '20-25'
data_set[23,]
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,70),include.lowest = FALSE, right = TRUE,labels = c('*','20-25','25-35','36-60','61이상'))
data_set[23,]
data_set[data_set$AGE_cut == '20-25',c(2:15,24,26:51)]
data_set$AGE_cut)
data_set$AGE_cut
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,70),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','25-35','36-60','61이상'))
barplot(table(data_set$AGE_cut))
data_set[23,]
data_set[data_set$AGE_cut == '20-25',c(2:15,24,26:51)]
data_set$AGE_cut == '20-25'
data_set[213,]
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
data_set[213,]
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,75),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','25-35','36-60','61이상'))
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,70),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','25-35','36-60','61이상'))
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,70),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','25-35','36-60','61이상'))
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,75),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','25-35','36-60','61이상'))
barplot(table(data_set$AGE_cut))
data_set[213,]
data_set[data_set$AGE_cut == '20-25',c(2:15,24,26:51)]
data_set <- read.csv('Data_set.csv',header = T, stringsAsFactors = F,
na.strings = c('NULL',''))
data_set = data_set[,-1] #이후 데이터 셋은 0번 고객 번호까지 삭제한 데이터셋을 활용함
str(data_set[,52]) # 변수 타입 확인
data_set[data_set$AGE == '*',52] <- '0'
data_set[,52] <- as.integer(data_set[,52])# 변수 타입 변경(chr -> int)
data_set$AGE_cut <- cut(data_set$AGE,  breaks = c(0,20,25,35,60,75),include.lowest = FALSE, right = FALSE, labels = c('*','20-25','26-35','36-60','61이상'))
data_set_1 <- data_set[data_set$AGE_cut == '20-25',c(2:15,24,26:51)]
data_Set_2 <- data_set[data_set$AGE_cut == '26-35',c(2:15,24,26:51)]
data_Set_3 <- data_set[data_set$AGE_cut == '36-60',c(2:15,24,26:51)]
data_Set_3 <- data_set[data_set$AGE_cut == '61이상',c(2:15,24,26:51)]
data_Set_3 <- data_set[data_set$AGE_cut == '36-60',c(2:15,24,26:51)]
data_Set_4 <- data_set[data_set$AGE_cut == '61이상',c(2:15,24,26:51)]
data_set_1
summary(data_Set_1)
summary(data_set_1)
data_set_1 <- data_set[data_set$AGE_cut == '20-25',c(1:15,24,26:51)]
data_Set_2 <- data_set[data_set$AGE_cut == '26-35',c(1:15,24,26:51)]
data_Set_3 <- data_set[data_set$AGE_cut == '36-60',c(1:15,24,26:51)]
data_Set_4 <- data_set[data_set$AGE_cut == '61이상',c(1:15,24,26:51)]
cor(data_set_1$TARGET,data_Set_1[-1,])
cor(data_set_1$TARGET,data_set_1)
str(data_set_1)
data_set$LT1Y_PEOD_RATE<-gsub('미만','',data_set$LT1Y_PEOD_RATE)
data_set$LT1Y_PEOD_RATE<-gsub('이상','',data_set$LT1Y_PEOD_RATE)
data_set$LT1Y_PEOD_RATE<-as.numeric(data_set$LT1Y_PEOD_RATE)
table(data_set$LT1Y_PEOD_RATE)
data_set_1 <- data_set[data_set$AGE_cut == '20-25',c(1:15,24,26:51)]
data_Set_2 <- data_set[data_set$AGE_cut == '26-35',c(1:15,24,26:51)]
data_Set_3 <- data_set[data_set$AGE_cut == '36-60',c(1:15,24,26:51)]
data_Set_4 <- data_set[data_set$AGE_cut == '61이상',c(1:15,24,26:51)]
cor(data_set_1$TARGET,data_set_1)
cor(data_set_1$TARGET,data_set_1)
cor(data_set_3$TARGET,data_set_3)
data_Set_3 <- data_set[data_set$AGE_cut == '36-60',c(1:15,24,26:51)]
cor(data_set_3$TARGET,data_set_3)
data_set_3 <- data_set[data_set$AGE_cut == '36-60',c(1:15,24,26:51)]
cor(data_set_3$TARGET,data_set_3)
table(data_0$NUM_DAY_SUSP)
data_0 <- data_set[data_set$TARGET==0,]
data_1 <- data_set[data_set$TARGET==1,]
summary(data_0$MOBL_PRIN)
summary(data_1$MOBL_PRIN)
aggregate(formula = TARGET ~ .,data = data_set_1,FUN = summary
cor(data_set_1$TARGET,data_set_1)
cor(data_set_2$TARGET,data_set_2)
cor(data_set_3$TARGET,data_set_3)
cor(data_set_4$TARGET,data_set_4)
str(data_set_1)
aggregate(formula = TARGET ~ .,data = data_set_1,FUN = summary)
aggregate(formula = TARGET ~ .,data = data_set_1,FUN = mean)
data_set_1_0 <- data_set[data_set_1$TARGET==0,]
data_set_1_1 <- data_set[data_set_1$TARGET==1,]
summary(data_set_1_0)
data_set_1 <- data_set[data_set$AGE_cut == '20-25',c(1:15,24,26:51)]
data_Set_2 <- data_set[data_set$AGE_cut == '26-35',c(1:15,24,26:51)]
data_set_3 <- data_set[data_set$AGE_cut == '36-60',c(1:15,24,26:51)]
data_Set_4 <- data_set[data_set$AGE_cut == '61이상',c(1:15,24,26:51)]
data_set_1_0 <- data_set[data_set_1$TARGET==0,]
data_set_1_1 <- data_set[data_set_1$TARGET==1,]
summary(data_set_1_0)
data_set_1_0
data_set_1
data_set_1_0 <- data_set_1[data_set_1$TARGET==0,]
data_set_1_1 <- data_set_1[data_set_1$TARGET==1,]
summary(data_set_1_0)
data_set_1_1 <- data_set_1[data_set_1$TARGET==1,]
write.csv(a,'a.csv')
write.csv(b,'b.csv')
a <- data_set_1_0 <- data_set_1[data_set_1$TARGET==0,]
b <- data_set_1_1 <- data_set_1[data_set_1$TARGET==1,]
write.csv(a,'a.csv')
write.csv(b,'b.csv')
a <- summary(data_set_1_0)
b <- summary(data_set_1_1)
write.csv(a,'a.csv')
write.csv(b,'b.csv')
data_set_3_0 <- data_set_3[data_set_3$TARGET==0,]
data_set_3_1 <- data_set_3[data_set_3$TARGET==1,]
a <- summary(data_set_3_0)
b <- summary(data_set_3_1)
write.csv(a,'b.csv')
write.csv(b,'c.csv')
data_set_a <- data_set[,c(1:15)]
decision_tree<- rpart(TARGET ~.,
data=data_set_a,method = "anova")
library(rpart)
data_set_a <- data_set[,c(1:15)]
decision_tree<- rpart(TARGET ~.,
data=data_set_a,method = "anova")
rpart.plot(decision_tree,type=2)
library(corrplot)
library(reshape2)
library(dplyr)
library(ggplot2)
rpart.plot(decision_tree,type=2)
library(rpart)
library(rpart.plot)
decision_tree<- rpart(TARGET ~.,
data=data_set_a,method = "anova")
rpart.plot(decision_tree,type=2)
data_set_a <- data_set[,c(1:15,52)]
decision_tree<- rpart(TARGET ~.,
data=data_set_a,method = "anova")
rpart.plot(decision_tree,type=2)
data_set[,c(1:15,52)]
setwd("C:/Users/User/Documents/GitHub/SNU_BDI/데이터마이닝")
setwd("/Users/arnorfati/Documents/GitHub/SNU_BDI/데이터마이닝")
rm(list=ls())
library(ISLR)
set.seed(1)
train = sample(392,196)
train
lm.fit = lm(mpg~horsepower, data = Auto, subset = train)
lm.fit
summary(Auto)
attach(Auto)
[-train]^2
predict(lm.fit,Auto)
mpg
mean((mpg-predict(lm.fit,Auto))[-train]^2)
(mpg-predict(lm.fit,Auto))[-train]^2
mean((mpg-predict(lm.fit,Auto))[-train]^2) #(Y - Yhat)^2 인데 여기서 train set을 제외하기 위해 [-train]
lm.fit2 = lm(mpg~ploy(horsepower,2), data = Auto, subset = train)
lm.fit2 = lm(mpg~poly(horsepower,2), data = Auto, subset = train)
mean((mpg~predict(lm.fit2,Auto))[-train]^2)
lm.fit2 = lm(mpg~poly(horsepower,2), data = Auto, subset = train)
mean((mpg~predict(lm.fit2,Auto))[-train]^2)
mpg~predict(lm.fit2,Auto)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3 = lm(mpg~ploy(horsepower,3),data=Auto,subset = train)
lm.fit3 = lm(mpg~poly(horsepower,3),data=Auto,subset = train)
mean((mpg-preidct(lm.fit3,Auto))[-train]^3)
mean((mpg-predict(lm.fit3,Auto))[-train]^3)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(2)
train = sample(392,196)
lm.fit = lm(mpg~horsepower, data = Auto, subset = train)
summary(Auto)
lm.fit = lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2) #(Y - Yhat)^2 인데 여기서 train set을 제외하기 위해 [-train]
set.seed(1)
train = sample(392,196)
summary(Auto)
set.seed(1)
train = sample(392,196)
lm.fit = lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2) #(Y - Yhat)^2 인데 여기서 train set을 제외하기 위해 [-train]
set.seed(2)
train = sample(392,196)
lm.fit = lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2) #(Y - Yhat)^2 인데 여기서 train set을 제외하기 위해 [-train]
glm.fit <- glm(mpg~horsepower, data= Auto)
coef(glm.fit)
install.packages(boot)
install.packages('boot')
library(boot)
cv,err = cv.glm(Auto,glm.fit)
cv.err = cv.glm(Auto,glm.fit)
cv.err
cv.error = rep(0,5)
cv.error
cv.error = rep(0,5)
for (i in 1:5) {
glm.fit <- glm(mpg~poly(horsepower,i),data= Auto)
cv.error[i] = cv.glm(Auto,glm.fit)
}
cv.error
cv.error = rep(0,5)
for (i in 1:5) {
glm.fit <- glm(mpg~poly(horsepower,i),data= Auto)
cv.error[i] = cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
cv.error.10 = rep(0,10)
cv.error.10 = rep(0,10)
for (i in 1:10){
glm.fit <- glm(mpg~poly(horsepower,i),data=Auto,k=10)
cv.error.10[i] <- cv.glm(Auto,glm.fit)$delta[1]
}
cv.error.10 = rep(0,10)
for (i in 1:10){
glm.fit <- glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i] <- cv.glm(Auto,glm.fit,k=10)$delta[1] # cv.glm에 k = 10을 넣어주면 됨
}
cv.error.10 = rep(0,10)
for (i in 1:10){
glm.fit <- glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i] <- cv.glm(Auto,glm.fit,K=10)$delta[1] # cv.glm에 K = 10을 넣어주면 됨
}
cv.error.10
summary(Portfolio)
alpha.fn(Portfolio,1:100)
alpha.fn = function(data,index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
alpha.fn(Portfolio,smaple(100,100,replace = T))
alpha.fn(Portfolio,sample(100,100,replace = T))
boot(Portfolio, alpha.fn,R = 10000)
boot(Portfolio, alpha.fn,R = 1000)
setwd("C:/Users/User/Documents/GitHub/SNU_BDI/데이터마이닝")
rm(list=ls())
library(ISLR)
attach(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters = na.omit(Hitters)
dim(Hitters)
summary(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
install.packages(leaps)
install.packages('leaps')
library(leaps)
regfit.full = regsubsets(Salary~.,Hitters)
regfit.full
summary(regfit.full)
reg.summary$rsq
regfit.full <- regsubsets(Salary~.,Hitters)
regfit.full
summary(regfit.full)
regfit.full <- regsubsets(Salary~.,hitters,nvmax=19)
regfit.full <- regsubsets(Salary~.,Hitters,nvmax=19)
regfit.full
summary(regfit.full)
reg.summary$rsq
reg.summary(summary(regfit.full))
reg.summary$rsq
reg.summary(summary(regfit.full))
reg.summary <- (summary(regfit.full))
reg.summary$rsq
reg.summary$adjr2
par(mfrow =c(2,2))
plot(reg.summary$rss,xlab='Number of Variables', ylab='RSS',type = 1)
plot(reg.summary$rss,xlab='Number of Variables', ylab='RSS',type = '1')
plot(reg.summary$rss,xlab='Number of Variables', ylab='RSS',type = 'l')
plot(reg.summary$adjr2,xlab='Number of Variables', ylab='RSS',type = 'l')
par(mfrow =c(2,2))
plot(reg.summary$rss,xlab='Number of Variables', ylab='RSS',type = 'l')
plot(reg.summary$adjr2,xlab='Number of Variables', ylab='adjr2',type = 'l')
plot(reg.summary$cp,xlab='Number of Variables', ylab='Cp',type = 'l')
plot(reg.summary$bic,xlab='Number of Variables', ylab='BIC',type = 'l')
regfit.fwd < regsubsets(Salary~.,data=Hitters,nvmax=19)
regfit.fwd <- regsubsets(Salary~.,data=Hitters,nvmax=19)
regfit.fwd <- regsubsets(Salary~.,data=Hitters,nvmax=19,method = 'forward')
regfit.fwd
summary(regfit.fwd)
regfit.bwd <- regsubsets(Salary~.,data=Hitters,nvmax=19,method = 'backward')
summary(regfit.fwd)
regfit.bwd$rss
reg.summary <- summary(regfit.fwd)
reg.summary$rsq
reg.summary$cp
train = sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test = (!train)
regfit.best=regsubsets(Salary~.data=Hitters[train,],nvmax=19)
regfit.best = regsubsets(Salary~.data=Hitters[train,],nvmax=19)
regfit.best = regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
regfit.best
test.mat = midel.matrix(Salary~.,data=Hitters[test,])
test.mat = model.matrix(Salary~.,data=Hitters[test,])
test.mat
test.mat = model.matrix(Salary~.,data=Hitters[test,])
test.mat
val.errors <- rep(NA,19)
for (i in 1:19) {
coefi <- coef(regfit.best,id=i)
pred<- test.mat[,names(coefi)]%*%coefi
val.errors[i]<- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
which.min(val.errors)
set.seed(1)
train = sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test = (!train)
regfit.best = regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
test.mat = model.matrix(Salary~.,data=Hitters[test,])
test.mat
val.errors <- rep(NA,19)
for (i in 1:19) {
coefi <- coef(regfit.best,id=i)
pred<- test.mat[,names(coefi)]%*%coefi
val.errors[i]<- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
val.errors
which.min(val.errors)
coef(regfit.best,10)
coef(regfit.best,9)
coef(regfit.best,7)
nrow(Hitters)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
folds
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
k = 10
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
folds
cv.errors <- matrix(NA,k,10,dimnames=list(NULL,paste(1:19)))
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
cv.errors
paste(1:19)
list(NULL, paste(1:19)
list(NULL, paste(1:19))
list(NULL, paste(1:19))
cv.errors
folds
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred=predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean((Hitters$Salary[fold ==j]-pred)^2)
}
}
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean((Hitters$Salary[fold ==j]-pred)^2)
}
}
k = 10
set.seed(1)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean((Hitters$Salary[fold ==j]-pred)^2)
}
}
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean( (Hitters$Salary[fold ==j]-pred)^2)
}
}
predic.regsubsets <- function(object,newdata,id,...){
form <- as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k = 10
set.seed(1)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean( (Hitters$Salary[fold ==j]-pred)^2)
}
}
set.seed(1)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict.regsubsets(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean( (Hitters$Salary[fold ==j]-pred)^2)
}
}
k = 10
set.seed(1)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL, paste(1:19)))
predic.regsubsets <- function(object,newdata,id,...){
form <- as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
predic.regsubsets
predict.regsubsets <- function(object,newdata,id,...){
form <- as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean( (Hitters$Salary[fold ==j]-pred)^2)
}
}
for (j in 1:k){
best.fit <- regsubsets(Salary~.,data=Hitters[folds != j,],nvmax=19)
for (i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id=i)
cv.errors[j,i] = mean( (Hitters$Salary[folds ==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow=c(2,2))
plot(mean.cv.errors,type='b')
par(mfrow=c(1,1))
plot(mean.cv.errors,type='b')
coef(reg.best,11)
wine_r %>%
group_by(quality) %>%
summarise(mean = round(mean(alcohol, na.rm=T),4),
var = round(var(alcohol, na.rm=T),4),
max = round(max(alcohol, na.rm=T),4),
min = round(min(alcohol, na.rm=T),4),
median = round(median(alcohol, na.rm=T),4))
